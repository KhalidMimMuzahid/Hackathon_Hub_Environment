version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: hub_prod_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hub}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hub_prod_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - hub_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-hub}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ./onchain_fastapi
      dockerfile: Dockerfile.prod
    container_name: hub_prod_api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-hub_prod_password_2024}@db:5432/${POSTGRES_DB:-hub}
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${API_SECRET_KEY:-your_super_secret_key_change_this_in_production}
      - CORS_ORIGINS=http://103.143.148.190,http://103.143.148.190:3000,http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - hub_network
    volumes:
      - api_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./hub_nextjs
      dockerfile: Dockerfile.prod
      args:
        - NEXT_PUBLIC_API_URL=http://103.143.148.190:8000
    container_name: hub_prod_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://103.143.148.190:8000
    depends_on:
      - api
    networks:
      - hub_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hub_prod_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8000:8000"
      - "3000:3000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - api
    networks:
      - hub_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  hub_network:
    driver: bridge
